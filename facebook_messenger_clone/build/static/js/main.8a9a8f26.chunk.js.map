{"version":3,"sources":["Message.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["Message","forwardRef","ref","message","isUser","userName","className","Card","style","borderRadius","lineHeight","width","CardContent","paddingTop","paddingRight","paddingBottom","paddingLeft","Typography","variant","component","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","useState","input","Setinput","messages","setmessages","setUsername","useEffect","collection","orderBy","onSnapshot","snapshot","docs","map","doc","id","data","prompt","src","marginTop","FormControl","InputLabel","Input","value","onChange","event","target","IconButton","disabled","type","color","onClick","preventDefault","add","timestamp","FieldValue","serverTimestamp","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"oWAuBeA,G,MApBAC,sBAAW,WAAoBC,GAAQ,IAA1BC,EAAyB,EAAzBA,QAClBC,EAD2C,EAAjBC,WACRF,EAAQE,SAEpC,OACI,yBAAKC,UAAU,cAIP,kBAACC,EAAA,EAAD,CAAMC,MAAO,CAACC,aAAa,QAAQC,WAAW,OAAOC,MAAM,gBACvD,kBAACC,EAAA,EAAD,CAAaN,UAAWF,EAAO,mBAAqB,oBAAqBI,MAAO,CAACK,WAAW,MAAMC,aAAa,OAAOC,cAAc,MAAMC,YAAY,SAClJ,kBAACC,EAAA,EAAD,CAAaC,QAAQ,KAAKC,UAAU,OAC1Bf,GAAD,UAAcD,EAAQE,SAAtB,MADT,MACgDF,EAAQA,gB,iBCF3DiB,EAXCC,IAASC,cAAc,CAACC,OAAQ,0CAC9CC,WAAY,iDACZC,YAAa,wDACbC,UAAW,iCACXC,cAAe,6CACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGIC,Y,yBC+CRC,MAjDf,WAAgB,IAAD,EACUC,mBAAS,IADnB,mBACNC,EADM,KACAC,EADA,OAEgBF,mBAAS,IAFzB,mBAENG,EAFM,KAEGC,EAFH,OAGgBJ,mBAAS,IAHzB,mBAGN5B,EAHM,KAGGiC,EAHH,KA2Bb,OAvBFC,qBAAU,WACVnB,EAAGoB,WAAW,YAAYC,QAAQ,YAAY,QAAQC,YAAW,SAAAC,GAE/DN,EAAYM,EAASC,KAAKC,KAAI,SAAAC,GAAG,MAAI,CAACC,GAAGD,EAAIC,GAAG5C,QAAS2C,EAAIE,iBAE7D,IAEFT,qBAAU,WAETD,EAAYW,OAAO,6BAElB,IAaE,yBAAK3C,UAAU,OACf,yBAAK4C,IAAI,6FAA6F1C,MAAO,CAAC2C,UAAU,SACxH,iDACA,uCAAa9C,GACb,yBAAKC,UAAU,kBACb,0BAAMA,UAAU,YACd,kBAAC8C,EAAA,EAAD,CAAa9C,UAAU,mBAAvB,IAA0C,kBAAC+C,EAAA,EAAD,2BAC1C,kBAACC,EAAA,EAAD,CAAOhD,UAAU,YAAYiD,MAAOrB,EAAOsB,SAAU,SAAAC,GAAK,OAAEtB,EAASsB,EAAMC,OAAOH,UACpF,kBAACI,EAAA,EAAD,CAAYrD,UAAU,iBAAiBsD,UAAW1B,EAAO2B,KAAK,SAAS3C,QAAQ,WAAW4C,MAAM,UAAUC,QAlB5F,SAAAN,GAEhBA,EAAMO,iBACN5C,EAAGoB,WAAW,YAAYyB,IAAI,CAC5B9D,QAAQ+B,EACR7B,SAASA,EACT6D,UAAU7C,IAASU,UAAUoC,WAAWC,sBAYxC,IAAiI,kBAAC,IAAD,MAAjI,QAIF,kBAAC,IAAD,KACChC,EAASS,KAAI,gBAAEE,EAAF,EAAEA,GAAG5C,EAAL,EAAKA,QAAL,OACZ,kBAAC,EAAD,CAASkE,IAAKtB,EAAI1C,SAAUA,EAAUF,QAASA,UCvCjCmE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMpF,c","file":"static/js/main.8a9a8f26.chunk.js","sourcesContent":["import React,{forwardRef} from 'react'\nimport {Card,CardContent,Typography} from \"@material-ui/core\"\nimport \"./Message.css\"\nconst Message =forwardRef(({message,userName},ref)=> {\n    const isUser=userName===message.userName\n   \nreturn (\n    <div className=\"messageBox\">\n           \n       \n            \n            <Card style={{borderRadius:'1.3em',lineHeight:'1.34',width:'fit-content'}} >\n                <CardContent className={isUser?'message_usercard' : 'message_guestcard'} style={{paddingTop:'6px',paddingRight:'12px',paddingBottom:'7px',paddingLeft:'12px'}}>\n                    <Typography  variant=\"h5\" component=\"h2\">\n                            {!isUser && `${message.userName} :`}   {message.message}\n                    </Typography>\n                </CardContent>\n            </Card>\n        </div>\n\n\n)\n})\nexport default Message\n","import firebase from \"firebase\"\nconst firebaseapp=firebase.initializeApp({apiKey: \"AIzaSyDKE9G2HFaK_D51DML8titvDU-xdnOhoqQ\",\n    authDomain: \"facebook-messenger-clone-46e9a.firebaseapp.com\",\n    databaseURL: \"https://facebook-messenger-clone-46e9a.firebaseio.com\",\n    projectId: \"facebook-messenger-clone-46e9a\",\n    storageBucket: \"facebook-messenger-clone-46e9a.appspot.com\",\n    messagingSenderId: \"585082656588\",\n    appId: \"1:585082656588:web:fca491e605ca116548a1e9\",\n    measurementId: \"G-B6F3X09F30\"})\n\n\n  const db=firebaseapp.firestore()\n  export default db;","import React,{useState,useEffect} from 'react';\nimport './App.css';\nimport {FormControl,Input,InputLabel,IconButton} from \"@material-ui/core\"\nimport Message from \"./Message\"\nimport firebase from \"firebase\"\nimport db from \"./firebase\"\nimport FlipMove from \"react-flip-move\"\nimport SendIcon from '@material-ui/icons/Send';\n\nfunction App() {\n  const [input,Setinput]=useState(\"\")\n  const [messages,setmessages]=useState([])\n  const [userName,setUsername]=useState(\"\")\nuseEffect(()=>{\ndb.collection(\"messages\").orderBy('timestamp','desc').onSnapshot(snapshot=>\n{\n  setmessages(snapshot.docs.map(doc =>({id:doc.id,message: doc.data()})))\n})\n},[])\n\nuseEffect(() => {\n //const name=prompt(\"Please enter your name\")\n setUsername(prompt(\"please enter your name\"))\n}\n, [])\n\n\n  const sendMessage=event =>\n  {\n    event.preventDefault()\n    db.collection(\"messages\").add({\n      message:input,\n      userName:userName,\n      timestamp:firebase.firestore.FieldValue.serverTimestamp()\n    })\n  }\n  return (\n    <div className=\"App\">\n    <img src=\"https://facebookbrand.com/wp-content/uploads/2018/09/Header-e1538151782912.png?w=100&h=100\" style={{marginTop:'3px'}} />\n    <h1>Hello Programmers</h1>\n    <h2>Welcome {userName}</h2>\n    <div className=\"form_container\">\n      <form className=\"app_form\">\n        <FormControl className=\"app_formcontrol\"> <InputLabel >Enter your Message</InputLabel>\n        <Input className=\"app_input\" value={input} onChange={event=>Setinput(event.target.value)} />\n      <IconButton className=\"app_iconButton\" disabled={!input} type=\"submit\" variant=\"outlined\" color=\"primary\" onClick={sendMessage}> <SendIcon /> </IconButton>\n        </FormControl>\n      </form>\n    </div>\n    <FlipMove>\n    {messages.map(({id,message}) =>(\n      <Message key={id} userName={userName} message={message}/>\n    ))}\n    </FlipMove>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}